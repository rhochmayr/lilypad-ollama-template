name: Update Files on Complete Setup Issue

permissions:
  contents: write
  issues: write

on:
  issues:
    types: [opened, edited]

jobs:
  update-files:
    runs-on: ubuntu-latest
    if: github.event.issue.title == 'Complete Setup'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Display Issue Details (Debug)
        run: |
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue body: ${{ github.event.issue.body }}"

      - name: Update Files Based on Issue Input
        run: |
          #############################
          # Extract input values from the issue body.
          #
          # Our issue form produces an issue body with headers like:
          #   ### Ollama Model URL
          #   https://ollama.com/library/deepseek-r1:14b
          #
          #   ### Initial Version
          #   0.1.0
          #
          # We use awk to capture the first non-empty line after each header.
          #############################
          
          # Assign the issue body to a variable.
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Extract the Ollama Model URL.
          MODEL_URL=$(echo "$ISSUE_BODY" | awk '/### Ollama Model URL/{flag=1; next} flag && NF {print; flag=0}')
          echo "MODEL_URL: $MODEL_URL"
          
          # Extract the Initial Version.
          VERSION=$(echo "$ISSUE_BODY" | awk '/### Initial Version/{flag=1; next} flag && NF {print; flag=0}')
          echo "VERSION: $VERSION"
          
          # Fallback: if the MODEL_URL wasnâ€™t found with the header approach, try to grep for a URL.
          if [ -z "$MODEL_URL" ]; then
            MODEL_URL=$(echo "$ISSUE_BODY" | grep -o 'https://ollama\.com/library/[^[:space:]]*')
          fi
          # Trim whitespace.
          MODEL_URL=$(echo "$MODEL_URL" | xargs)
          
          # Parse MODEL_URL to extract:
          #   - MODEL (e.g., deepseek-r1:14b)
          #   - MODEL_NAME (e.g., deepseek-r1)
          #   - MODEL_TAG (e.g., 14b)
          MODEL_PART=$(echo "$MODEL_URL" | sed 's|https://ollama.com/library/||')
          MODEL_NAME=$(echo "$MODEL_PART" | cut -d':' -f1)
          MODEL_TAG=$(echo "$MODEL_PART" | cut -d':' -f2)
          
          echo "MODEL_PART: $MODEL_PART"
          echo "MODEL_NAME: $MODEL_NAME"
          echo "MODEL_TAG: $MODEL_TAG"
          
          # Derive REPOSITORY_OWNER and REPO_NAME from the GitHub context.
          REPO_FULL="${GITHUB_REPOSITORY}"  # format: owner/repo
          REPOSITORY_OWNER=$(echo "$REPO_FULL" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO_FULL" | cut -d'/' -f2)
          
          echo "REPOSITORY_OWNER: $REPOSITORY_OWNER"
          echo "REPO_NAME: $REPO_NAME"
          
          #############################
          # Replace placeholders in the files.
          # Files and placeholders:
          # 
          # README.md:
          #   %%MODEL_NAME%%, %%MODEL_TAG%%, %%MODEL%%,
          #   %%REPO_NAME%%, %%REPOSITORY_OWNER%%, %%VERSION%%, %%MODEL_URL%%
          #
          # run_ollama.sh:
          #   %%MODEL%%
          #
          # lilypad_module.json.tmpl:
          #   %%REPOSITORY_OWNER%%, %%REPO_NAME%%, %%VERSION%%
          #
          # Dockerfile:
          #   %%MODEL%%
          #############################
          
          # Update README.md
          sed -i "s|%%MODEL_NAME%%|$MODEL_NAME|g" README.md
          sed -i "s|%%MODEL_TAG%%|$MODEL_TAG|g" README.md
          sed -i "s|%%MODEL%%|$MODEL_PART|g" README.md
          sed -i "s|%%REPO_NAME%%|$REPO_NAME|g" README.md
          sed -i "s|%%REPOSITORY_OWNER%%|$REPOSITORY_OWNER|g" README.md
          sed -i "s|%%VERSION%%|$VERSION|g" README.md
          sed -i "s|%%MODEL_URL%%|$MODEL_URL|g" README.md

          # Remove the first 2 lines from README.md.
          sed -i '1,2d' README.md

          # Update run_ollama.sh
          sed -i "s|%%MODEL%%|$MODEL_PART|g" run_ollama.sh
          
          # Update lilypad_module.json.tmpl
          sed -i "s|%%REPOSITORY_OWNER%%|$REPOSITORY_OWNER|g" lilypad_module.json.tmpl
          sed -i "s|%%REPO_NAME%%|$REPO_NAME|g" lilypad_module.json.tmpl
          sed -i "s|%%VERSION%%|$VERSION|g" lilypad_module.json.tmpl

          # Update Dockerfile
          sed -i "s|%%MODEL%%|$MODEL_PART|g" Dockerfile

      - name: Commit and Push Changes
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Updated files based on Complete Setup issue submission"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Close the Issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
